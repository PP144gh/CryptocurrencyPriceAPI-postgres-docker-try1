# db setup

sudo apt-get update

sudo apt-get upgrade

sudo apt-get install postgresql

curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add

sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/focal/ pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

sudo apt install pgadmin4

# run postgres

docker stop postgres

docker rm postgres

docker pull postgres:latest

docker run --name postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=test -e POSTGRES_DB=eventLogger -p 5432:5432 -d postgres:latest

# to setup the password of postgres user

sudo -u postgres psql

\password postgres


# create server

set name: test

set hostname/address: localhost

Username: postgres
password: same as you defined earlier

# in test server create a database

SQL tab for creation via SQL script called eventLogger

In DataBases tab select eventLogger and then Query Tool

CREATE TABLE price_data (
  id SERIAL PRIMARY KEY,
  pair VARCHAR(10),
  fetch_interval INTEGER,
  price_oscillation_trigger DECIMAL,
  price_oscillation DECIMAL,
  price DECIMAL(10, 4),
  timestamp TIMESTAMP
);

# query Price_data via SQL query Tool

SELECT * FROM price_data;

# add data manually

INSERT INTO price_data (pair, fetch_interval, price_oscillation_trigger, price_oscillation, price, timestamp)
VALUES ('BTC/USD', 60, 1.5, 2.0, 30000.1234, '2024-07-25 12:34:56');

# remove data manually

DELETE FROM price_data WHERE id = 1;


# via command line connect to postgres

sudo -u postgres psql

\c eventLogger

run queries like for the manual case


#dockerized application

To dockerize your application, you'll need to create a Dockerfile for both the backend and frontend, as well as a docker-compose.yml file to orchestrate the services together
Create Dockerfile in root dir for backend.
Create Dockerfile in frontend dir for frontend.
Create docker-compose.yml in root dir.
change the dbConfig.js to receive env variables (from the docker compose)

setup initialization script por database
in database folder create init.SQL
"
-- init.sql
CREATE TABLE IF NOT EXISTS price_data (
    id SERIAL PRIMARY KEY,
    pair VARCHAR(10),
    fetch_interval INTEGER,
    price_oscillation_trigger DECIMAL,
    price_oscillation DECIMAL,
    price DECIMAL(10, 4),
    timestamp TIMESTAMP
);

-- Optionally, insert some initial data
-- INSERT INTO price_data (pair, fetch_interval, price_oscillation_trigger, price_oscillation, price, timestamp)
-- VALUES ('BTC-USD', 5000, 1.5, 1.2, 40000.0000, NOW());
"

update docker-compose accordingly.

"
db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: eventLogger
    ports:
      - "5433:5432" #using host port 5433 to avoid conflicts if posgres is running already (default port is 5432)
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
"


then run in root

docker volume rm uphold_pgdata

docker volume rm uphold_pgdata

docker-compose up --build


check container database

docker exec -it uphold_db_1  psql -U postgres -d eventLogger

SELECT * FROM price_data;

